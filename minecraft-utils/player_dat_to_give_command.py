# this code reads a player dat file and makes one or more commands to give his inventory

import gzip
import io
from nbt import nbt

# Load the .dat file and read its contents
file_path = 'yourDatFile.dat'
with gzip.open(file_path, 'rb') as file:
    nbt_data = nbt.NBTFile(buffer=io.BytesIO(file.read()))

# Extract the inventory data
inventory_data = nbt_data['Inventory']

# Convert inventory data to a readable format
inventory_items = []
for item in inventory_data:
    item_dict = {
        'id': item['id'].value,
        'Count': item['count'].value,
        'Slot': item['Slot'].value,
        'tag': item.get('tag', {})
    }
    inventory_items.append(item_dict)

# Define max chest size (number of slots)
max_chest_size = 27

# Generate the /give commands for chests containing the items
commands = []
current_items = []
for item in inventory_items:
    current_items.append(item)
    if len(current_items) == max_chest_size:
        commands.append(current_items.copy())
        current_items.clear()

# Add the remaining items (if any)
if current_items:
    commands.append(current_items)

# Generate /give commands for each set of items
for idx, items in enumerate(commands, start=1):
    item_commands = []
    for item in items:
        id = item['id']
        count = item['Count']
        slot = item['Slot']-((idx-1)*28)
        tag = item['tag']
        if slot < 0 or slot > 29:
            print(f"/give @p {id} {count}")
            continue
        tag_str = f",tag:{tag}" if tag else ""
        item_commands.append(f"{{id:\"{id}\",Count:{count},Slot:{slot}{tag_str}}}")

    give_command = f"/give @p minecraft:chest{{BlockEntityTag:{{Items:[{','.join(item_commands)}]}}}}"

    # Add a comment to distinguish between multiple commands
    print(f"# Command {idx}")
    print(give_command)
    print()
