# gets chest data at x, y, z in a minecraft world region

import os
import gzip
import io
import struct
import zlib
from nbt import nbt

def get_chunk_file_path(world_path, x, z):
    region_x = x >> 5
    region_z = z >> 5
    return os.path.join(world_path, f"region/r.{region_x}.{region_z}.mca")

def get_chunk_offset_and_sector_count(region_file, chunk_x, chunk_z):
    with open(region_file, "rb") as f:
        offset = (chunk_x & 31) + (chunk_z & 31) * 32
        f.seek(offset * 4)
        data = f.read(4)
        if len(data) < 4:
            return None, None
        location = struct.unpack(">I", data)[0]
        if location == 0:
            return None, None
        sector_offset = location >> 8
        sector_count = location & 0xFF
        return sector_offset, sector_count

def read_chunk_data(region_file, sector_offset, sector_count):
    with open(region_file, "rb") as f:
        f.seek(sector_offset * 4096)
        chunk_data = f.read(sector_count * 4096)
        length = struct.unpack(">I", chunk_data[:4])[0]
        compression_type = chunk_data[4]
        if compression_type == 1:  # Gzip
            return gzip.decompress(chunk_data[5:5+length])
        elif compression_type == 2:  # Zlib
            return zlib.decompress(chunk_data[5:5+length])
        else:
            raise ValueError("Unknown compression type")

def extract_chest_data(nbt_data, x, y, z):
    chunk = nbt.NBTFile(buffer=io.BytesIO(nbt_data))
    print(f"NBT Structure: {chunk.pretty_tree()}")  # Add this line for debugging
    if 'Level' not in chunk:
        print("no level")
        return
        # raise KeyError("Tag 'Level' does not exist in the NBT data.")
    for tile_entity in chunk['Level']['TileEntities']:
        if tile_entity['x'].value == x and tile_entity['y'].value == y and tile_entity['z'].value == z:
            return tile_entity
    return None

def generate_give_command(chest_data):
    items = chest_data['Items']
    item_commands = []
    for item in items:
        id = item['id'].value
        count = item['Count'].value
        slot = item['Slot'].value
        tag = item.get('tag', {})
        tag_str = f",tag:{tag}" if tag else ""
        item_commands.append(f"{{id:\"{id}\",Count:{count},Slot:{slot}{tag_str}}}")
    give_command = f"/give @p minecraft:chest{{BlockEntityTag:{{Items:[{','.join(item_commands)}]}}}}"
    return give_command

def main(world_path, x, y, z):
    chunk_x = x >> 4
    chunk_z = z >> 4
    region_file = get_chunk_file_path(world_path, chunk_x, chunk_z)
    sector_offset, sector_count = get_chunk_offset_and_sector_count(region_file, chunk_x, chunk_z)
    if sector_offset is None:
        print("Chunk not found.")
        return

    chunk_data = read_chunk_data(region_file, sector_offset, sector_count)
    try:
        chest_data = extract_chest_data(chunk_data, x, y, z)
        if chest_data is None:
            print("Chest not found.")
            return
        give_command = generate_give_command(chest_data)
        print(give_command)
    except KeyError as e:
        print(e)

print("Made by 4re5 group - 2024")

# Example usage
world_path = "./"
x, y, z = 89, 68, -748  # Replace with your chest coordinates
main(world_path, x, y, z)
