using System;
using System.IO;
using System.Security.AccessControl;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
		Console.WriteLine("   4re5 group - folder vuln checker [https://github.com/4RE5group/exploiting-scripts]");
		if(args.Length < 1) { 
			Console.WriteLine("Invalid, usage: checker.exe <path>");
			return;
		}
		string rootDirectory = args[0];
		
		if(!Directory.Exists(rootDirectory)) {
			Console.WriteLine("Directory not found: "+rootDirectory);
			return;
		}

        CheckDirectoryPermissions(rootDirectory);
		
		Console.WriteLine("Finished");
    }

    static void CheckDirectoryPermissions(string rootDirectory)
    {
        try
        {
            if (!Directory.Exists(rootDirectory))
            {
                Console.WriteLine("Le répertoire spécifié n'existe pas : "+rootDirectory);
                return;
            }

            // iterate over subfolders
            var directories = Directory.EnumerateDirectories(rootDirectory, "*", SearchOption.AllDirectories);

            foreach (var directory in directories)
            {
                var files = Directory.EnumerateFiles(directory, "*.*", SearchOption.TopDirectoryOnly)
                    .Where(file => file.Contains("pass") || file.Contains("mdp") || file.Contains("admin") ||
								   file.EndsWith(".exe", StringComparison.OrdinalIgnoreCase) ||
								   file.EndsWith(".bat", StringComparison.OrdinalIgnoreCase) ||
								   file.EndsWith(".ps1", StringComparison.OrdinalIgnoreCase) ||
                                   file.EndsWith(".dll", StringComparison.OrdinalIgnoreCase));

                if (files.Any())
                {
                    

                    // check dir perms
                    if (IsDirectoryWritable(directory))
                    {
						Console.WriteLine("Folder found with .bat .ps1 .exe ou .dll: "+directory);
                        Console.WriteLine("Folder can be edited: "+directory);
						Console.WriteLine("");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occured: "+ex.Message);
        }
    }

    static bool IsDirectoryWritable(string path)
    {
        try
        {
            string testFilePath = Path.Combine(path, Path.GetRandomFileName());
            using (FileStream fs = File.Create(testFilePath, 1, FileOptions.DeleteOnClose))
            {
                // if creation success folder can be edited
            }
            return true;
        }
        catch (UnauthorizedAccessException)
        {
            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error while checking perms: "+ex.Message);
            return false;
        }
    }
}
